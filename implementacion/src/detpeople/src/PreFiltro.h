 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   PreFiltro.h
 * Author: fabricio
 *
 * Created on 12 de marzo de 2016, 19:25
 */

#ifndef PREFILTRO_H
#define PREFILTRO_H
#include <cstdlib>
#include "opencv2/opencv.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <opencv2/video/background_segm.hpp>
#include "DetectorCascada.h"

#include <string>
#include <vector>
#include <iostream>

// enumerador de los tipos de filtro 2D para hacerlo mas natural.
enum KernelType{repujado, enfoque, desenfoque};

class PreFiltro {
public:
    /*!* \fn Constructor de un objeto vacio*/
    PreFiltro();
    /*!* \fn Constructor de PreFiltro 
     *   */
    PreFiltro(const PreFiltro& orig);
    /*!* \fn construccion de un objeto PreFiltro, lo contruimos con una imagen cargada
     * \param cv::Mat& imagen -> imagen cargada por defecto
     *   */
    PreFiltro(const cv::Mat& imagen){ imgFiltrada = imagen.clone();}
    /*!* \fn Funcion dedicada a achicar la imagen, esto es muy util cuando tenemos una imagen muy grande
     *       y deceamos disminuir el tiempo de procesamiento
     * \param const float& escala_inicia -> es el numero por el que el tamaÃ±a de la imagen va a ser dividido
     * \return  Void */
    void Achicar(const float& escala_inicial);
    
    
    /** \fn implementacion de un Filtro 2D con distintos tipos de Kernel a eleccion
     * \param KernelType = tipo de kernel implementado
     * \* repujado = 1
     * \* enfoque = 2
     * \* desenfoque = 3
     * \return  void  */
    void Filtro2D(int KernelType);
    /** \fn Se encarga de implementar los todos los filtros 
     *      basicos para optimizar la deteccion de personas:
     *      incluidos hasta ahora:
     *      \//medianBlur(img, img, 5)
     *      \//normalize
     *      \ecualizeHist
     * \param void
     * \return  void  */
    void FiltroEstandard();
   
    /** \fn Implementacion de un subtractor de fondo, actualmente 
    *      sin mayores resultados utiles para deteccion de personas
    * \param void
    * \return  void  */
    void BackgroundSubtractorMOG2();
    
    /** \fn devuelve imagen Pre Filtrada 
     *      Esto dependera de las funciones utilizadas
     *  
     *  \return cv::Mat  */
    cv::Mat GetImagen(){return this -> imgFiltrada;}
    /** \fn devuelve imagen PreFiltrada con suprecion de background 
     *      Esto dependera de las funciones utilizadas
     * 
     *  \return cv::Mat fgMaskMOG2 */
    cv::Mat GetImagenSub(){return this -> fgMaskMOG2;}
    void SetImagen(cv::Mat imagen){imgFiltrada = imagen;}
    virtual ~PreFiltro();
        


private:
    //imagen con la que va a trabajar todos los metodos de PreFiltro
    cv::Mat imgFiltrada;
    
    //Variables del supresor de fondo MOG2
    int history = 1;
    float varThreshold = 16;
    bool bShadowDetection = true;
    
    //fg mask fg mask generated by MOG2 method
    cv::Mat fgMaskMOG2; 
    //MOG2 Background subtractor
    cv::Ptr<cv::BackgroundSubtractor> pMOG2; 
    
};

#endif /* PREFILTRO_H */

